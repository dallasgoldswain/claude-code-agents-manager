# Claude Code Configuration for Ruby Projects
# Place this file in your project root

# Default agent for Ruby files
default_agent: ruby-expert-pro

# Automatic agent invocation based on file patterns
auto_invoke:
  # Main Ruby expert for all Ruby files
  - pattern: "*.rb"
    agent: ruby-expert-pro

  - pattern: "lib/**/*.rb"
    agent: rails-api-expert

  # CLI and gem development

  - pattern: "lib/*/cli.rb"
    agent: cli-gem-expert

  # Testing and performance
  - pattern: "test/**/*_test.rb"
    agent: ruby-performance-tester

# Agent collaboration rules
collaboration:
  # When creating new features, use multiple agents
  feature_development:
    - ruby-expert-pro # Core implementation
    - ruby-performance-tester # Generate tests

  cli_creation:
    - cli-gem-expert # Gem structure
    - ruby-expert-pro # Core logic
    - ruby-performance-tester # Test suite

# Project-specific settings
project:
  ruby_version: "3.4.6"
  test_framework: "minitest"

  # Code style preferences
  style:
    string_quotes: "double"
    max_line_length: 100
    indent_size: 2

  # Performance thresholds
  performance:
    max_query_time: 100 # milliseconds
    max_memory_usage: 100 # megabytes
    min_test_coverage: 90 # percentage

# Tool configurations
tools:
  rubocop:
    enabled: true
    config_file: ".rubocop.yml"

  simplecov:
    enabled: true
    minimum_coverage: 90

  brakeman:
    enabled: true
    confidence_level: 2

  bundler_audit:
    enabled: true
    update_on_start: true

# MCP server connections (optional)
mcp_servers:
  ruby_docs:
    type: stdio
    command: ruby-doc-server
    args: ["--interactive"]
    env:
      RUBY_VERSION: "3.4.6"

  rubygems_api:
    type: http
    url: "https://rubygems.org/api/v1/"
    timeout: 10000

# Custom commands
commands:
  # Run all quality checks
  quality_check:
    description: "Run all code quality checks"
    steps:
      - rubocop
      - minitest
      - simplecov
      - brakeman

  # Performance analysis
  performance_analysis:
    description: "Analyze application performance"
    steps:
      - ruby-prof
      - memory_profiler
      - benchmark-ips

# Agent behaviors
behaviors:
  # Always suggest improvements
  proactive_suggestions: true

  # Automatically generate tests
  auto_generate_tests: true

  # Include performance benchmarks
  include_benchmarks: true

  # Add documentation
  generate_yard_docs: true

  # Security scanning
  security_scanning: true

  # Code coverage requirements
  enforce_coverage: true

# Notification settings
notifications:
  # Alert on performance issues
  performance_alerts:
    enabled: true
    threshold: 100 # ms

  # Security vulnerability alerts
  security_alerts:
    enabled: true
    severity: medium

  # Code quality alerts
  quality_alerts:
    enabled: true
    rubocop_rating: B

  # Test failure alerts
  test_alerts:
    enabled: true
    fail_fast: false

# Environment-specific overrides
environments:
  development:
    default_agent: ruby-expert-pro
    performance:
      max_query_time: 200

  test:
    default_agent: ruby-performance-tester
    behaviors:
      auto_generate_tests: true

  staging:
    default_agent: rails-api-expert
    security:
      audit_sql_queries: true

  production:
    default_agent: ruby-expert-pro
    performance:
      max_query_time: 50
    security:
      enforce_strong_params: true
      require_authentication: true
